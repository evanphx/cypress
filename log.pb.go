// Code generated by protoc-gen-gogo.
// source: log.proto
// DO NOT EDIT!

/*
	Package cypress is a generated protocol buffer package.

	It is generated from these files:
		log.proto

	It has these top-level messages:
		Interval
		Attribute
		Message
		StreamHeader
*/
package cypress

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"
import tai64n "github.com/vektra/tai64n"

import io "io"
import fmt "fmt"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type StreamHeader_Compression int32

const (
	StreamHeader_NONE   StreamHeader_Compression = 0
	StreamHeader_SNAPPY StreamHeader_Compression = 1
	StreamHeader_ZLIB   StreamHeader_Compression = 2
)

var StreamHeader_Compression_name = map[int32]string{
	0: "NONE",
	1: "SNAPPY",
	2: "ZLIB",
}
var StreamHeader_Compression_value = map[string]int32{
	"NONE":   0,
	"SNAPPY": 1,
	"ZLIB":   2,
}

func (x StreamHeader_Compression) Enum() *StreamHeader_Compression {
	p := new(StreamHeader_Compression)
	*p = x
	return p
}
func (x StreamHeader_Compression) String() string {
	return proto.EnumName(StreamHeader_Compression_name, int32(x))
}
func (x *StreamHeader_Compression) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StreamHeader_Compression_value, data, "StreamHeader_Compression")
	if err != nil {
		return err
	}
	*x = StreamHeader_Compression(value)
	return nil
}

type Interval struct {
	Seconds          uint64 `protobuf:"varint,1,req,name=seconds" json:"seconds" codec:"seconds"`
	Nanoseconds      uint32 `protobuf:"varint,2,req,name=nanoseconds" json:"nanoseconds" codec:"nanoseconds"`
	XXX_unrecognized []byte `json:"-" codec:"-"`
}

func (m *Interval) Reset()         { *m = Interval{} }
func (m *Interval) String() string { return proto.CompactTextString(m) }
func (*Interval) ProtoMessage()    {}

func (m *Interval) GetSeconds() uint64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Interval) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type Attribute struct {
	Key              uint32    `protobuf:"varint,1,req,name=key" json:"key" codec:"key,omitempty"`
	Skey             *string   `protobuf:"bytes,2,opt,name=skey" json:"skey,omitempty" codec:"skey,omitempty"`
	Ival             *int64    `protobuf:"zigzag64,3,opt,name=ival" json:"ival,omitempty" codec:"ival,omitempty"`
	Sval             *string   `protobuf:"bytes,4,opt,name=sval" json:"sval,omitempty" codec:"sval,omitempty"`
	Bval             []byte    `protobuf:"bytes,5,opt,name=bval" json:"bval,omitempty" codec:"bval,omitempty"`
	Tval             *Interval `protobuf:"bytes,6,opt,name=tval" json:"tval,omitempty" codec:"tval,omitempty"`
	Boolval          *bool     `protobuf:"varint,7,opt,name=boolval" json:"boolval,omitempty" codec:"boolval,omitempty"`
	XXX_unrecognized []byte    `json:"-" codec:"-"`
}

func (m *Attribute) Reset()         { *m = Attribute{} }
func (m *Attribute) String() string { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()    {}

func (m *Attribute) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *Attribute) GetSkey() string {
	if m != nil && m.Skey != nil {
		return *m.Skey
	}
	return ""
}

func (m *Attribute) GetIval() int64 {
	if m != nil && m.Ival != nil {
		return *m.Ival
	}
	return 0
}

func (m *Attribute) GetSval() string {
	if m != nil && m.Sval != nil {
		return *m.Sval
	}
	return ""
}

func (m *Attribute) GetBval() []byte {
	if m != nil {
		return m.Bval
	}
	return nil
}

func (m *Attribute) GetTval() *Interval {
	if m != nil {
		return m.Tval
	}
	return nil
}

func (m *Attribute) GetBoolval() bool {
	if m != nil && m.Boolval != nil {
		return *m.Boolval
	}
	return false
}

type Message struct {
	Timestamp        *tai64n.TAI64N `protobuf:"bytes,1,req,name=timestamp" json:"timestamp,omitempty" codec:"timestamp"`
	Type             *uint32        `protobuf:"varint,2,req,name=type" json:"type,omitempty" codec:"type"`
	Attributes       []*Attribute   `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty" codec:"attributes"`
	SessionId        *string        `protobuf:"bytes,4,opt,name=session_id" json:"session_id,omitempty" codec:"session_id"`
	XXX_unrecognized []byte         `json:"-" codec:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

func (m *Message) GetTimestamp() *tai64n.TAI64N {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Message) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Message) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Message) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

type StreamHeader struct {
	Compression      *StreamHeader_Compression `protobuf:"varint,1,req,name=compression,enum=cypress.StreamHeader_Compression" json:"compression,omitempty"`
	XXX_unrecognized []byte                    `json:"-" codec:"-"`
}

func (m *StreamHeader) Reset()         { *m = StreamHeader{} }
func (m *StreamHeader) String() string { return proto.CompactTextString(m) }
func (*StreamHeader) ProtoMessage()    {}

func (m *StreamHeader) GetCompression() StreamHeader_Compression {
	if m != nil && m.Compression != nil {
		return *m.Compression
	}
	return StreamHeader_NONE
}

func init() {
	proto.RegisterEnum("cypress.StreamHeader_Compression", StreamHeader_Compression_name, StreamHeader_Compression_value)
}
func (m *Interval) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Seconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanoseconds", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Nanoseconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Attribute) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Key |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Skey = &s
			index = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ival", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Ival = &v2
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Sval = &s
			index = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bval", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bval = append([]byte{}, data[index:postIndex]...)
			index = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tval == nil {
				m.Tval = &Interval{}
			}
			if err := m.Tval.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boolval", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Boolval = &b
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Message) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &tai64n.TAI64N{}
			}
			if err := m.Timestamp.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &Attribute{})
			m.Attributes[len(m.Attributes)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.SessionId = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *StreamHeader) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			var v StreamHeader_Compression
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (StreamHeader_Compression(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Compression = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Interval) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovLog(uint64(m.Seconds))
	n += 1 + sovLog(uint64(m.Nanoseconds))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Attribute) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovLog(uint64(m.Key))
	if m.Skey != nil {
		l = len(*m.Skey)
		n += 1 + l + sovLog(uint64(l))
	}
	if m.Ival != nil {
		n += 1 + sozLog(uint64(*m.Ival))
	}
	if m.Sval != nil {
		l = len(*m.Sval)
		n += 1 + l + sovLog(uint64(l))
	}
	if m.Bval != nil {
		l = len(m.Bval)
		n += 1 + l + sovLog(uint64(l))
	}
	if m.Tval != nil {
		l = m.Tval.Size()
		n += 1 + l + sovLog(uint64(l))
	}
	if m.Boolval != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovLog(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovLog(uint64(*m.Type))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovLog(uint64(l))
		}
	}
	if m.SessionId != nil {
		l = len(*m.SessionId)
		n += 1 + l + sovLog(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamHeader) Size() (n int) {
	var l int
	_ = l
	if m.Compression != nil {
		n += 1 + sovLog(uint64(*m.Compression))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLog(x uint64) (n int) {
	return sovLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Interval) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Interval) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintLog(data, i, uint64(m.Seconds))
	data[i] = 0x10
	i++
	i = encodeVarintLog(data, i, uint64(m.Nanoseconds))
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Attribute) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Attribute) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintLog(data, i, uint64(m.Key))
	if m.Skey != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLog(data, i, uint64(len(*m.Skey)))
		i += copy(data[i:], *m.Skey)
	}
	if m.Ival != nil {
		data[i] = 0x18
		i++
		i = encodeVarintLog(data, i, uint64((uint64(*m.Ival)<<1)^uint64((*m.Ival>>63))))
	}
	if m.Sval != nil {
		data[i] = 0x22
		i++
		i = encodeVarintLog(data, i, uint64(len(*m.Sval)))
		i += copy(data[i:], *m.Sval)
	}
	if m.Bval != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintLog(data, i, uint64(len(m.Bval)))
		i += copy(data[i:], m.Bval)
	}
	if m.Tval != nil {
		data[i] = 0x32
		i++
		i = encodeVarintLog(data, i, uint64(m.Tval.Size()))
		n1, err := m.Tval.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Boolval != nil {
		data[i] = 0x38
		i++
		if *m.Boolval {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Message) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Message) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLog(data, i, uint64(m.Timestamp.Size()))
		n2, err := m.Timestamp.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Type != nil {
		data[i] = 0x10
		i++
		i = encodeVarintLog(data, i, uint64(*m.Type))
	}
	if len(m.Attributes) > 0 {
		for _, msg := range m.Attributes {
			data[i] = 0x1a
			i++
			i = encodeVarintLog(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SessionId != nil {
		data[i] = 0x22
		i++
		i = encodeVarintLog(data, i, uint64(len(*m.SessionId)))
		i += copy(data[i:], *m.SessionId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StreamHeader) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StreamHeader) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Compression != nil {
		data[i] = 0x8
		i++
		i = encodeVarintLog(data, i, uint64(*m.Compression))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Log(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Log(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLog(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (this *Interval) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Interval)
	if !ok {
		return fmt.Errorf("that is not of type *Interval")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Interval but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Intervalbut is not nil && this == nil")
	}
	if this.Seconds != that1.Seconds {
		return fmt.Errorf("Seconds this(%v) Not Equal that(%v)", this.Seconds, that1.Seconds)
	}
	if this.Nanoseconds != that1.Nanoseconds {
		return fmt.Errorf("Nanoseconds this(%v) Not Equal that(%v)", this.Nanoseconds, that1.Nanoseconds)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Interval) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Interval)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Seconds != that1.Seconds {
		return false
	}
	if this.Nanoseconds != that1.Nanoseconds {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Attribute) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Attribute)
	if !ok {
		return fmt.Errorf("that is not of type *Attribute")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Attribute but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Attributebut is not nil && this == nil")
	}
	if this.Key != that1.Key {
		return fmt.Errorf("Key this(%v) Not Equal that(%v)", this.Key, that1.Key)
	}
	if this.Skey != nil && that1.Skey != nil {
		if *this.Skey != *that1.Skey {
			return fmt.Errorf("Skey this(%v) Not Equal that(%v)", *this.Skey, *that1.Skey)
		}
	} else if this.Skey != nil {
		return fmt.Errorf("this.Skey == nil && that.Skey != nil")
	} else if that1.Skey != nil {
		return fmt.Errorf("Skey this(%v) Not Equal that(%v)", this.Skey, that1.Skey)
	}
	if this.Ival != nil && that1.Ival != nil {
		if *this.Ival != *that1.Ival {
			return fmt.Errorf("Ival this(%v) Not Equal that(%v)", *this.Ival, *that1.Ival)
		}
	} else if this.Ival != nil {
		return fmt.Errorf("this.Ival == nil && that.Ival != nil")
	} else if that1.Ival != nil {
		return fmt.Errorf("Ival this(%v) Not Equal that(%v)", this.Ival, that1.Ival)
	}
	if this.Sval != nil && that1.Sval != nil {
		if *this.Sval != *that1.Sval {
			return fmt.Errorf("Sval this(%v) Not Equal that(%v)", *this.Sval, *that1.Sval)
		}
	} else if this.Sval != nil {
		return fmt.Errorf("this.Sval == nil && that.Sval != nil")
	} else if that1.Sval != nil {
		return fmt.Errorf("Sval this(%v) Not Equal that(%v)", this.Sval, that1.Sval)
	}
	if !bytes.Equal(this.Bval, that1.Bval) {
		return fmt.Errorf("Bval this(%v) Not Equal that(%v)", this.Bval, that1.Bval)
	}
	if !this.Tval.Equal(that1.Tval) {
		return fmt.Errorf("Tval this(%v) Not Equal that(%v)", this.Tval, that1.Tval)
	}
	if this.Boolval != nil && that1.Boolval != nil {
		if *this.Boolval != *that1.Boolval {
			return fmt.Errorf("Boolval this(%v) Not Equal that(%v)", *this.Boolval, *that1.Boolval)
		}
	} else if this.Boolval != nil {
		return fmt.Errorf("this.Boolval == nil && that.Boolval != nil")
	} else if that1.Boolval != nil {
		return fmt.Errorf("Boolval this(%v) Not Equal that(%v)", this.Boolval, that1.Boolval)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Attribute) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attribute)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Skey != nil && that1.Skey != nil {
		if *this.Skey != *that1.Skey {
			return false
		}
	} else if this.Skey != nil {
		return false
	} else if that1.Skey != nil {
		return false
	}
	if this.Ival != nil && that1.Ival != nil {
		if *this.Ival != *that1.Ival {
			return false
		}
	} else if this.Ival != nil {
		return false
	} else if that1.Ival != nil {
		return false
	}
	if this.Sval != nil && that1.Sval != nil {
		if *this.Sval != *that1.Sval {
			return false
		}
	} else if this.Sval != nil {
		return false
	} else if that1.Sval != nil {
		return false
	}
	if !bytes.Equal(this.Bval, that1.Bval) {
		return false
	}
	if !this.Tval.Equal(that1.Tval) {
		return false
	}
	if this.Boolval != nil && that1.Boolval != nil {
		if *this.Boolval != *that1.Boolval {
			return false
		}
	} else if this.Boolval != nil {
		return false
	} else if that1.Boolval != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Message) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message)
	if !ok {
		return fmt.Errorf("that is not of type *Message")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Messagebut is not nil && this == nil")
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if this.Type != nil && that1.Type != nil {
		if *this.Type != *that1.Type {
			return fmt.Errorf("Type this(%v) Not Equal that(%v)", *this.Type, *that1.Type)
		}
	} else if this.Type != nil {
		return fmt.Errorf("this.Type == nil && that.Type != nil")
	} else if that1.Type != nil {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return fmt.Errorf("Attributes this(%v) Not Equal that(%v)", len(this.Attributes), len(that1.Attributes))
	}
	for i := range this.Attributes {
		if !this.Attributes[i].Equal(that1.Attributes[i]) {
			return fmt.Errorf("Attributes this[%v](%v) Not Equal that[%v](%v)", i, this.Attributes[i], i, that1.Attributes[i])
		}
	}
	if this.SessionId != nil && that1.SessionId != nil {
		if *this.SessionId != *that1.SessionId {
			return fmt.Errorf("SessionId this(%v) Not Equal that(%v)", *this.SessionId, *that1.SessionId)
		}
	} else if this.SessionId != nil {
		return fmt.Errorf("this.SessionId == nil && that.SessionId != nil")
	} else if that1.SessionId != nil {
		return fmt.Errorf("SessionId this(%v) Not Equal that(%v)", this.SessionId, that1.SessionId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if this.Type != nil && that1.Type != nil {
		if *this.Type != *that1.Type {
			return false
		}
	} else if this.Type != nil {
		return false
	} else if that1.Type != nil {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if !this.Attributes[i].Equal(that1.Attributes[i]) {
			return false
		}
	}
	if this.SessionId != nil && that1.SessionId != nil {
		if *this.SessionId != *that1.SessionId {
			return false
		}
	} else if this.SessionId != nil {
		return false
	} else if that1.SessionId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StreamHeader) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StreamHeader)
	if !ok {
		return fmt.Errorf("that is not of type *StreamHeader")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StreamHeader but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StreamHeaderbut is not nil && this == nil")
	}
	if this.Compression != nil && that1.Compression != nil {
		if *this.Compression != *that1.Compression {
			return fmt.Errorf("Compression this(%v) Not Equal that(%v)", *this.Compression, *that1.Compression)
		}
	} else if this.Compression != nil {
		return fmt.Errorf("this.Compression == nil && that.Compression != nil")
	} else if that1.Compression != nil {
		return fmt.Errorf("Compression this(%v) Not Equal that(%v)", this.Compression, that1.Compression)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *StreamHeader) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StreamHeader)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Compression != nil && that1.Compression != nil {
		if *this.Compression != *that1.Compression {
			return false
		}
	} else if this.Compression != nil {
		return false
	} else if that1.Compression != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
